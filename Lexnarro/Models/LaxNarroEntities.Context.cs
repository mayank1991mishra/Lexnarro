//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lexnarro.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LaxNarroEntities : DbContext
    {
        public LaxNarroEntities()
            : base("name=LaxNarroEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Rule3_Master> Rule3_Master { get; set; }
        public virtual DbSet<State_Rule3_Marriage> State_Rule3_Marriage { get; set; }
        public virtual DbSet<Activity_Master> Activity_Master { get; set; }
        public virtual DbSet<Category_Master> Category_Master { get; set; }
        public virtual DbSet<Country_Master> Country_Master { get; set; }
        public virtual DbSet<ExpiredPlanUserMailLog> ExpiredPlanUserMailLogs { get; set; }
        public virtual DbSet<MailLog> MailLogs { get; set; }
        public virtual DbSet<page_master> page_master { get; set; }
        public virtual DbSet<Plan_Master> Plan_Master { get; set; }
        public virtual DbSet<Rate_Card> Rate_Card { get; set; }
        public virtual DbSet<Role_Master> Role_Master { get; set; }
        public virtual DbSet<role_page_map> role_page_map { get; set; }
        public virtual DbSet<Rule1_Master> Rule1_Master { get; set; }
        public virtual DbSet<Rule2_Master> Rule2_Master { get; set; }
        public virtual DbSet<Rule4_Master> Rule4_Master { get; set; }
        public virtual DbSet<State_Activity_Mapping> State_Activity_Mapping { get; set; }
        public virtual DbSet<State_Category_With_Rule4_Mapping> State_Category_With_Rule4_Mapping { get; set; }
        public virtual DbSet<State_Master> State_Master { get; set; }
        public virtual DbSet<StateActivity__with_Rule2> StateActivity__with_Rule2 { get; set; }
        public virtual DbSet<StateActivitySubActivityWithRule1> StateActivitySubActivityWithRule1 { get; set; }
        public virtual DbSet<Sub_Activity_Master> Sub_Activity_Master { get; set; }
        public virtual DbSet<Subscription_Master> Subscription_Master { get; set; }
        public virtual DbSet<Total_Unit_Master> Total_Unit_Master { get; set; }
        public virtual DbSet<User_Profile> User_Profile { get; set; }
        public virtual DbSet<User_Role_Mapping> User_Role_Mapping { get; set; }
        public virtual DbSet<User_Subscription> User_Subscription { get; set; }
        public virtual DbSet<User_Training_Status> User_Training_Status { get; set; }
        public virtual DbSet<User_Training_Transaction> User_Training_Transaction { get; set; }
        public virtual DbSet<PaypalResponse> PaypalResponses { get; set; }
        public virtual DbSet<User_Transaction_Master> User_Transaction_Master { get; set; }
    
        public virtual int usp_insert(string firstName, string lastName, string otherName, string streetNumber, string streetName, Nullable<decimal> postCode, string suburb, Nullable<decimal> stateID, Nullable<decimal> countryID, Nullable<decimal> stateEnrolled, Nullable<decimal> lawSocietyNumber, string emailAddress, string phoneNumber, string userName, string password, Nullable<System.DateTime> date, Nullable<decimal> role_id, string address, string device_Imei, string device_Type, string device_Token, string isDeleted, string accountConfirmed, Nullable<System.Guid> activationCode, ObjectParameter id)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var otherNameParameter = otherName != null ?
                new ObjectParameter("OtherName", otherName) :
                new ObjectParameter("OtherName", typeof(string));
    
            var streetNumberParameter = streetNumber != null ?
                new ObjectParameter("StreetNumber", streetNumber) :
                new ObjectParameter("StreetNumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var postCodeParameter = postCode.HasValue ?
                new ObjectParameter("PostCode", postCode) :
                new ObjectParameter("PostCode", typeof(decimal));
    
            var suburbParameter = suburb != null ?
                new ObjectParameter("Suburb", suburb) :
                new ObjectParameter("Suburb", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(decimal));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(decimal));
    
            var stateEnrolledParameter = stateEnrolled.HasValue ?
                new ObjectParameter("StateEnrolled", stateEnrolled) :
                new ObjectParameter("StateEnrolled", typeof(decimal));
    
            var lawSocietyNumberParameter = lawSocietyNumber.HasValue ?
                new ObjectParameter("LawSocietyNumber", lawSocietyNumber) :
                new ObjectParameter("LawSocietyNumber", typeof(decimal));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var role_idParameter = role_id.HasValue ?
                new ObjectParameter("Role_id", role_id) :
                new ObjectParameter("Role_id", typeof(decimal));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var device_ImeiParameter = device_Imei != null ?
                new ObjectParameter("Device_Imei", device_Imei) :
                new ObjectParameter("Device_Imei", typeof(string));
    
            var device_TypeParameter = device_Type != null ?
                new ObjectParameter("Device_Type", device_Type) :
                new ObjectParameter("Device_Type", typeof(string));
    
            var device_TokenParameter = device_Token != null ?
                new ObjectParameter("Device_Token", device_Token) :
                new ObjectParameter("Device_Token", typeof(string));
    
            var isDeletedParameter = isDeleted != null ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(string));
    
            var accountConfirmedParameter = accountConfirmed != null ?
                new ObjectParameter("AccountConfirmed", accountConfirmed) :
                new ObjectParameter("AccountConfirmed", typeof(string));
    
            var activationCodeParameter = activationCode.HasValue ?
                new ObjectParameter("ActivationCode", activationCode) :
                new ObjectParameter("ActivationCode", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_insert", firstNameParameter, lastNameParameter, otherNameParameter, streetNumberParameter, streetNameParameter, postCodeParameter, suburbParameter, stateIDParameter, countryIDParameter, stateEnrolledParameter, lawSocietyNumberParameter, emailAddressParameter, phoneNumberParameter, userNameParameter, passwordParameter, dateParameter, role_idParameter, addressParameter, device_ImeiParameter, device_TypeParameter, device_TokenParameter, isDeletedParameter, accountConfirmedParameter, activationCodeParameter, id);
        }
    }
}
